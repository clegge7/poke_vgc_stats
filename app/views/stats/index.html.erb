<link href="https://cdn.jsdelivr.net/npm/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />
<div class="container-fluid mt-4">
  <h1>Pokémon VGC Stats</h1>
  <div class="row mb-3">
    <div class="col-md-3">
      <label for="monthSelect" class="form-label">Select Month</label>
      <select id="monthSelect" class="form-select"></select>
    </div>
    <div class="col-md-3">
      <label for="formatSelect" class="form-label">Select VGC BO3 Format</label>
      <select id="formatSelect" class="form-select"></select>
    </div>
    <div class="col-md-3 d-flex align-items-end">
      <button id="loadDataBtn" class="btn btn-primary w-100" disabled>Load Data</button>
    </div>
  </div>
  <!-- Usage Charts: Full width, hidden by default -->
  <div class="row">
    <div class="col-12">
      <div id="usageChartsCardWrapper" style="display: none;">
        <div class="card mb-3">
          <div class="card-header d-flex justify-content-between align-items-center">
            <span>Usage Charts</span>
            <button class="btn btn-link p-0" id="usageChartsToggleBtn" type="button" data-bs-toggle="collapse" data-bs-target="#usageChartsCollapse" aria-expanded="true" aria-controls="usageChartsCollapse">
              <span class="chevron-icon" style="display: inline-block; transition: transform 0.2s;"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/></svg></span>
            </button>
          </div>
          <div class="collapse" id="usageChartsCollapse">
            <div class="card-body">
              <div class="row">
                <div id="usageChartCol" class="col-md-6">
                  <canvas id="usageChart" height="100"></canvas>
                </div>
                <div class="col-md-6" id="restrictedChartDiv"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <!-- Sidebar: Pokemon List/Search -->
    <div class="col-md-4" style="max-width: 400px; min-width: 300px;">
      <div id="sidebarPanel" style="display: none;">
        <h5>All Pokémon</h5>
        <input id="pokemonSearch" type="text" class="form-control mb-2" placeholder="Search Pokémon...">
        <ul id="pokemonList" class="list-group mb-3"></ul>
      </div>
    </div>
    <!-- Main Content -->
    <div class="col-md-8">
      <div id="pokemonDetailsMessage">
        <div id="pokemonDetailsLoading" class="text-center my-4" style="display:none;">
          <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
        </div>
        <div id="pokemonDetailsError" class="my-4 alert alert-danger" style="display:none;"></div>
      </div>
      <div id="pokemonDetailsPanel" class="mb-4" style="display:none;">
        <h3 id="pokemonDetailsName"></h3>
        <ul class="nav nav-tabs" id="pokeTabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="overview-tab" data-bs-toggle="tab" data-bs-target="#overview" type="button" role="tab">Overview</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="speed-tab" data-bs-toggle="tab" data-bs-target="#speed" type="button" role="tab">Speed</button>
          </li>
        </ul>
        <div class="tab-content" id="pokeTabsContent">
          <div class="tab-pane fade show active" id="overview" role="tabpanel">
            <h5 class="mt-3">Items</h5>
            <div id="items-grid"></div>
            <h5 class="mt-3">Moves</h5>
            <div id="moves-grid"></div>
            <h5 class="mt-3">Abilities</h5>
            <div id="abilities-grid"></div>
            <h5 class="mt-3">Natures</h5>
            <div id="natures-grid"></div>
            
          </div>
          <div class="tab-pane fade" id="speed" role="tabpanel">
            <div id="speed-chart-container" class="mt-3">
              <h5>Speed Distribution</h5>
              <canvas id="speedChart" height="80"></canvas>
            </div>
          </div>
        </div>
      </div>
      <div id="statsDisplay" class="mt-4">
        <!-- Additional stats and charts will be rendered here -->
      </div>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/gridjs/dist/gridjs.umd.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
  let globalPokemonData = {};
  let usageChart;
  let speedChart;
  let allPokemonNames = [];
  let pokedex = [];
  let restrictedList = [];
  let cachedChaosData = null;
  let cachedMonth = null;
  let cachedFormat = null;

  $(function() {
    const $monthSelect = $('#monthSelect');
    const $formatSelect = $('#formatSelect');
    const $loadDataBtn = $('#loadDataBtn');
    const $usageChartCtx = $('#usageChart')[0].getContext('2d');
    const $pokemonList = $('#pokemonList');
    const $sidebarPanel = $('#sidebarPanel');
    const $pokemonSearch = $('#pokemonSearch');
    const $usageChartsCollapse = $('#usageChartsCollapse');
    const $chevronIcon = $('#usageChartsToggleBtn .chevron-icon');
    const $pokemonDetailsPanel = $('#pokemonDetailsPanel');
    const $pokemonDetailsName = $('#pokemonDetailsName');
    const $pokemonDetailsLoading = $('#pokemonDetailsLoading');
    const $pokemonDetailsError = $('#pokemonDetailsError');
    const $speedChartContainer = $('#speed-chart-container');

    // Fetch months
    $.getJSON('/months', function(months) {
      months.reverse().forEach(function(month) {
        $monthSelect.append($('<option>').val(month).text(month));
      });
      if (months.length > 0) {
        $monthSelect.val(months[0]);
        fetchFormats(months[0]);
      }
    });

    $monthSelect.on('change', function() {
      fetchFormats($(this).val());
      updateLoadButtonState();
    });

    $formatSelect.on('change', function() {
      updateLoadButtonState();
    });

    $loadDataBtn.on('click', function() {
      fetchAndRenderData();
    });

    if ($pokemonSearch.length) {
      $pokemonSearch.on('input', function() {
        filterPokemonList($(this).val());
      });
    }

    function fetchFormats(month) {
      $formatSelect.empty();
      $.getJSON(`/formats?month=${month}`, function(formats) {
        formats.forEach(function(format) {
          $formatSelect.append($('<option>').val(format).text(format));
        });
        if (formats.length > 0) {
          $formatSelect.val(formats[0]);
        }
        updateLoadButtonState();
      });
    }

    function updateLoadButtonState() {
      $loadDataBtn.prop('disabled', !($monthSelect.val() && $formatSelect.val()));
    }

    function fetchAndRenderData() {
      const month = $monthSelect.val();
      const format = $formatSelect.val();
      if (!month || !format) return;
      $.getJSON(`/data?month=${month}&format=${format}`, function(data) {
        if (data.error) {
          alert(data.error);
          return;
        }
        globalPokemonData = data.data;
        cachedChaosData = data.data;
        cachedMonth = month;
        cachedFormat = format;
        renderUsageCharts(globalPokemonData);
        renderPokemonList(globalPokemonData);
        // Show sidebar and clear search
        $sidebarPanel.show();
        $pokemonSearch.val('');
        // Show the usage charts card and expand the collapse
        $('#usageChartsCardWrapper').show();
        let collapse = bootstrap.Collapse.getOrCreateInstance($('#usageChartsCollapse')[0]);
        collapse.show();
      });
    }

    function renderUsageCharts(pokemonData) {
      // Split into restricted and non-restricted
      const entries = Object.entries(pokemonData).filter(([_, val]) => val.usage !== undefined);
      const restrictedSet = new Set(restrictedList);
      const regular = entries.filter(([name]) => !restrictedSet.has(name));
      const restricted = entries.filter(([name]) => restrictedSet.has(name));
      // Top 12 regular
      const topRegular = regular.sort((a, b) => b[1].usage - a[1].usage).slice(0, 12);
      // Top 8 restricted
      const topRestricted = restricted.sort((a, b) => b[1].usage - a[1].usage).slice(0, 8);

      // Render regular chart
      if (usageChart) usageChart.destroy();
      usageChart = new Chart($usageChartCtx, {
        type: 'bar',
        data: {
          labels: topRegular.map(([name]) => name),
          datasets: [{
            label: 'Usage %',
            data: topRegular.map(([_, val]) => (val.usage * 100).toFixed(2)),
            backgroundColor: 'rgba(54, 162, 235, 0.5)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: false },
            title: {
              display: true,
              text: 'Top 12 Pokémon Usage % (Non-Restricted)'
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              title: { display: true, text: 'Usage %' }
            }
          }
        }
      });

      // Render restricted chart
      const $usageChartCol = $('#usageChartCol');
      const $restrictedChartDiv = $('#restrictedChartDiv');
      if (topRestricted.length === 0) {
        $usageChartCol.removeClass('col-md-6').addClass('col-12');
        $restrictedChartDiv.hide();
      } else {
        $usageChartCol.removeClass('col-12').addClass('col-md-6');
        $restrictedChartDiv.show();
        $restrictedChartDiv.empty();
        const $canvas = $('<canvas id="restrictedChart" height="100"></canvas>');
        $restrictedChartDiv.append($canvas);
        const restrictedChartCtx = $canvas[0].getContext('2d');
        if (window.restrictedChart && typeof window.restrictedChart.destroy === 'function') {
          window.restrictedChart.destroy();
        }
        window.restrictedChart = new Chart(restrictedChartCtx, {
          type: 'bar',
          data: {
            labels: topRestricted.map(([name]) => name),
            datasets: [{
              label: 'Usage %',
              data: topRestricted.map(([_, val]) => (val.usage * 100).toFixed(2)),
              backgroundColor: 'rgba(255, 99, 132, 0.5)',
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: { display: false },
              title: {
                display: true,
                text: 'Top 8 Restricted Pokémon Usage %'
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                title: { display: true, text: 'Usage %' }
              }
            }
          }
        });
      }
    }

    function renderPokemonList(pokemonData) {
      $pokemonList.empty();
      const entries = Object.entries(pokemonData)
        .filter(([_, val]) => typeof val.usage === 'number')
        .sort((a, b) => b[1].usage - a[1].usage);
      allPokemonNames = entries.map(([name]) => name);
      entries.forEach(([name, val]) => {
        const isRestricted = restrictedList.includes(name);
        const $li = $('<li>').addClass('list-group-item list-group-item-action d-flex justify-content-between align-items-center');
        const $nameSpan = $('<span>').text(name);
        const $badge = $('<span>')
          .addClass('badge rounded-pill')
          .addClass(isRestricted ? '' : 'bg-primary')
          .css(isRestricted ? { backgroundColor: '#ff6384', color: '#fff' } : {})
          .text(`${(val.usage * 100).toFixed(2)}%`);
        $li.append($nameSpan, $badge);
        $li.css('cursor', 'pointer');
        $li.on('click', function() {
          fetchAndRenderPokemonDetails(name);
        });
        $pokemonList.append($li);
      });
    }

    function showLoading() {
      $pokemonDetailsLoading.show();
      $pokemonDetailsError.hide();
    }
    function showError(msg) {
      $pokemonDetailsLoading.hide();
      $pokemonDetailsError.text(msg).show();
    }
    function clearMessages() {
      $pokemonDetailsLoading.hide();
      $pokemonDetailsError.hide();
    }

    function fetchAndRenderPokemonDetails(name) {
      const month = $monthSelect.val();
      const format = $formatSelect.val();
      if (!month || !format || !name) return;
      $pokemonDetailsPanel.hide();
      showLoading();
      // Use cached data if available and month/format match
      if (cachedChaosData && cachedMonth === month && cachedFormat === format) {
        clearMessages();
        const pokeData = cachedChaosData[name];
        if (!pokeData) {
          showError('Pokémon not found in data');
          $pokemonDetailsPanel.hide();
          return;
        }
        // Extract details from cached data (mimic backend logic)
        renderPokemonDetailsFromApi(name, extractPokemonDetailsFromChaos(name, pokeData));
      } else {
        // Fallback: fetch from backend if cache is missing or month/format changed
        $.getJSON(`/pokemon_details?month=${encodeURIComponent(month)}&format=${encodeURIComponent(format)}&name=${encodeURIComponent(name)}`)
          .done(function(data) {
            if (data.error) {
              showError(data.error);
              $pokemonDetailsPanel.hide();
              return;
            }
            clearMessages();
            renderPokemonDetailsFromApi(name, data);
          })
          .fail(function() {
            showError('Failed to load details.');
            $pokemonDetailsPanel.hide();
          });
      }
    }

    function extractPokemonDetailsFromChaos(name, pokeData) {
      // This mimics the backend logic for extracting details from chaos data
      const total = pokeData["Raw count"] || 1;
      // Items
      let items = [];
      if (pokeData["Items"]) {
        const totalItems = Object.values(pokeData["Items"]).reduce((a, b) => a + b, 0);
        items = Object.entries(pokeData["Items"]).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([item, count]) => {
          const pct = totalItems > 0 ? ((count / totalItems) * 100).toFixed(2) : 0;
          return pct > 0 ? [item, `${pct}%`] : null;
        }).filter(Boolean);
      }
      // Moves
      let moves = [];
      if (pokeData["Moves"]) {
        const totalMoves = Object.values(pokeData["Moves"]).reduce((a, b) => a + b, 0);
        moves = Object.entries(pokeData["Moves"]).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([move, count]) => {
          const pct = totalMoves > 0 ? ((count / totalMoves) * 400).toFixed(2) : 0;
          return pct > 0 ? [move, `${pct}%`] : null;
        }).filter(Boolean);
      }
      // Abilities
      let abilities = [];
      if (pokeData["Abilities"]) {
        const totalAbilities = Object.values(pokeData["Abilities"]).reduce((a, b) => a + b, 0);
        abilities = Object.entries(pokeData["Abilities"]).sort((a, b) => b[1] - a[1]).map(([ability, count]) => {
          const pct = totalAbilities > 0 ? ((count / totalAbilities) * 100).toFixed(2) : 0;
          return pct > 0 ? [ability, `${pct}%`] : null;
        }).filter(Boolean);
      }
      // Natures
      let natures = [];
      if (pokeData["Spreads"]) {
        const natureTotals = {};
        const natureSpreads = {};
        Object.entries(pokeData["Spreads"]).forEach(([spread, count]) => {
          const parts = spread.split(":");
          const nature = parts[0];
          natureTotals[nature] = (natureTotals[nature] || 0) + count;
          if (!natureSpreads[nature]) natureSpreads[nature] = {};
          natureSpreads[nature][spread] = (natureSpreads[nature][spread] || 0) + count;
        });
        const totalSpreads = Object.values(pokeData["Spreads"]).reduce((a, b) => a + b, 0);
        natures = Object.entries(natureTotals).sort((a, b) => b[1] - a[1]).map(([nature, count]) => {
          const pct = totalSpreads > 0 ? ((count / totalSpreads) * 100).toFixed(2) : 0;
          if (pct == 0) return null;
          const spreadsForNature = Object.entries(natureSpreads[nature] || {}).sort((a, b) => b[1] - a[1]);
          const commonSpreads = spreadsForNature.slice(0, 5).map(([spread, spreadCount]) => {
            const evs = spread.split(":")[1];
            const spreadPct = count > 0 ? ((spreadCount / count) * 100).toFixed(2) : 0;
            if (spreadPct == 0) return null;
            return `${evs} (${spreadPct}%)`;
          }).filter(Boolean).join('<br>');
          return [nature, `${pct}%`, commonSpreads];
        }).filter(Boolean);
      }
      // Speed distribution
      let speed_distribution = [];
      try {
        let base_speed = null;
        if (pokedex && typeof pokedex === 'object') {
          const pokeEntry = pokedex[name] || pokedex[name.toLowerCase().replace(/[^a-z0-9]/g, '')];
          if (pokeEntry && pokeEntry.baseStats && typeof pokeEntry.baseStats.spe === 'number') {
            base_speed = pokeEntry.baseStats.spe;
          }
        }
        if (base_speed && pokeData["Spreads"]) {
          const speedUp = ["Timid", "Hasty", "Jolly", "Naive"];
          const speedDown = ["Brave", "Relaxed", "Quiet", "Sassy"];
          const speedCounts = {};
          Object.entries(pokeData["Spreads"]).forEach(([spread, count]) => {
            const parts = spread.split(":");
            if (parts.length === 2) {
              const nature = parts[0];
              const stats = parts[1].split("/").map(x => parseInt(x, 10));
              const speedEV = stats[5];
              let natureMultiplier = 1.0;
              if (speedUp.includes(nature)) natureMultiplier = 1.1;
              else if (speedDown.includes(nature)) natureMultiplier = 0.9;
              let IV = 31;
              if (speedDown.includes(nature) && speedEV === 0) IV = 0;
              const speed = Math.floor(
                (Math.floor(((2 * base_speed + IV + Math.floor(speedEV / 4)) * 50) / 100) + 5) * natureMultiplier
              );
              speedCounts[speed] = (speedCounts[speed] || 0) + count;
            }
          });
          const totalSpeed = Object.values(speedCounts).reduce((a, b) => a + b, 0);
          speed_distribution = Object.keys(speedCounts).sort((a, b) => a - b).map(spd => {
            const pct = totalSpeed > 0 ? ((speedCounts[spd] / totalSpeed) * 100).toFixed(2) : 0;
            return pct > 0 ? [spd, `${pct}%`] : null;
          }).filter(Boolean);
        }
      } catch (e) {
        speed_distribution = [];
      }
      return {
        items,
        moves,
        abilities,
        natures,
        speed_distribution
      };
    }

    function renderPokemonDetailsFromApi(name, data) {
      $pokemonDetailsPanel.show();
      $pokemonDetailsName.text(name);
      // Fully clear previous grids (remove all .gridjs elements)
      ['items-grid', 'moves-grid', 'abilities-grid', 'natures-grid'].forEach(function(id) {
        const $old = $('#' + id);
        const $new = $('<div>').attr('id', id);
        $old.replaceWith($new);
      });
      const $itemsGrid = $('#items-grid');
      const $movesGrid = $('#moves-grid');
      const $abilitiesGrid = $('#abilities-grid');
      const $naturesGrid = $('#natures-grid');
      $speedChartContainer.hide();
      if (data.items && data.items.length > 0) {
        new gridjs.Grid({
          columns: ['Item', '%'],
          data: data.items,
          style: {
            table: { 'font-size': '0.9rem' },
            th: { 'text-align': 'left' },
            td: { 'text-align': 'left' }
          }
        }).render($itemsGrid[0]);
      }
      if (data.moves && data.moves.length > 0) {
        new gridjs.Grid({
          columns: ['Move', '%'],
          data: data.moves,
          style: {
            table: { 'font-size': '0.9rem' },
            th: { 'text-align': 'left' },
            td: { 'text-align': 'left' }
          }
        }).render($movesGrid[0]);
      }
      if (data.abilities && data.abilities.length > 0) {
        new gridjs.Grid({
          columns: ['Ability', '%'],
          data: data.abilities,
          style: {
            table: { 'font-size': '0.9rem' },
            th: { 'text-align': 'left' },
            td: { 'text-align': 'left' }
          }
        }).render($abilitiesGrid[0]);
      }
      if (data.natures && data.natures.length > 0) {
        new gridjs.Grid({
          columns: ['Nature', 'Usage %', 'Common Spreads'],
          data: data.natures.map(([nature, pct, spreads]) => [nature, pct, gridjs.html(spreads)]),
          style: {
            table: { 'font-size': '0.9rem' },
            th: { 'text-align': 'left' },
            td: { 'text-align': 'left' }
          }
        }).render($naturesGrid[0]);
      }
      if (data.speed_distribution && data.speed_distribution.length > 0) {
        $speedChartContainer.show();
        if (window.speedChart && typeof window.speedChart.destroy === 'function') {
          window.speedChart.destroy();
        }
        setTimeout(() => {
          renderSpeedChartFromApi(data.speed_distribution);
        }, 100);
      } else {
        $speedChartContainer.hide();
      }
    }

    function renderSpeedChartFromApi(speed_distribution) {
      if (speedChart) speedChart.destroy();
      const ctx = document.getElementById('speedChart').getContext('2d');
      const labels = speed_distribution.map(([spd, _]) => spd);
      const dataArr = speed_distribution.map(([_, pct]) => parseFloat(pct));
      speedChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Usage %',
            data: dataArr,
            backgroundColor: 'rgba(255, 99, 132, 0.5)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: false },
            title: {
              display: true,
              text: 'Speed Distribution'
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              title: { display: true, text: 'Usage %' }
            },
            x: {
              title: { display: true, text: 'Speed' }
            }
          }
        }
      });
    }

    function filterPokemonList(query) {
      const filter = query.trim().toLowerCase();
      Array.from($pokemonList.children()).forEach(li => {
        if (li.textContent.toLowerCase().includes(filter)) {
          li.style.display = '';
        } else {
          li.style.display = 'none';
        }
      });
    }

    function normalizeName(name) {
      return name.toLowerCase().replace(/[^a-z0-9]/g, '');
    }

    function renderSpeedChart(spreads, pokeName) {
      if (speedChart) speedChart.destroy();
      // Find the base speed from pokedex
      let baseSpeed = null;
      if (pokedex && typeof pokedex === 'object') {
        const normName = normalizeName(pokeName);
        if (
          pokedex[normName] &&
          pokedex[normName].baseStats &&
          typeof pokedex[normName].baseStats.spe === 'number'
        ) {
          baseSpeed = pokedex[normName].baseStats.spe;
        }
      }
      if (baseSpeed === null) {
        // fallback: dont render chart if base speed not found
        console.log(`No base speed found for ${pokeName}`);
        return;
      }
      // Nature multipliers
      const speedUp = ["Timid", "Hasty", "Jolly", "Naive"];
      const speedDown = ["Brave", "Relaxed", "Quiet", "Sassy"];
      const speedCounts = {};
      Object.entries(spreads).forEach(([spread, count]) => {
        // Spread format: Nature:HP/Atk/Def/SpA/SpD/Spe
        const parts = spread.split(':');
        if (parts.length === 2) {
          const nature = parts[0];
          const stats = parts[1].split('/').map(x => parseInt(x, 10));
          const speedEV = stats[5];
          let natureMultiplier = 1.0;
          if (speedUp.includes(nature)) natureMultiplier = 1.1;
          else if (speedDown.includes(nature)) natureMultiplier = 0.9;
          // IV logic
          let IV = 31;
          if (speedDown.includes(nature) && speedEV === 0) IV = 0;
          // Speed calculation
          const speed = Math.floor(
            (Math.floor(((2 * baseSpeed + IV + Math.floor(speedEV / 4)) * 50) / 100) + 5) * natureMultiplier
          );
          speedCounts[speed] = (speedCounts[speed] || 0) + count;
        }
      });
      const sortedSpeeds = Object.keys(speedCounts).map(Number).sort((a, b) => a - b);
      // Fill in missing speeds for a continuous x-axis
      if (sortedSpeeds.length > 0) {
        const minSpeed = sortedSpeeds[0];
        const maxSpeed = sortedSpeeds[sortedSpeeds.length - 1];
        const allSpeeds = [];
        const total = Object.values(speedCounts).reduce((a, b) => a + b, 0);
        const allCounts = [];
        for (let s = minSpeed; s <= maxSpeed; s++) {
          const pct = total > 0 ? ((speedCounts[s] || 0) / total) * 100 : 0;
          allSpeeds.push(s);
          allCounts.push(pct.toFixed(2));
        }
        const ctx = document.getElementById('speedChart').getContext('2d');
        speedChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: allSpeeds,
            datasets: [{
              label: 'Usage %',
              data: allCounts,
              backgroundColor: 'rgba(255, 99, 132, 0.5)',
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: { display: false },
              title: {
                display: true,
                text: 'Speed Distribution'
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                title: { display: true, text: 'Usage %' }
              },
              x: {
                title: { display: true, text: 'Speed' },
                min: minSpeed,
                max: maxSpeed
              }
            }
          }
        });
      }
    }

    // Fetch Pokedex.json on page load
    fetch('/pokedex.json')
      .then(res => res.json())
      .then(data => { pokedex = data; });

    // Fetch restricted_pokemon.json on page load
    fetch('/restricted_pokemon.json')
      .then(res => res.json())
      .then(data => { restrictedList = data; });

    if ($usageChartsCollapse.length && $chevronIcon.length) {
      $usageChartsCollapse.on('show.bs.collapse', function() {
        $chevronIcon.css('transform', 'rotate(0deg)');
      });
      $usageChartsCollapse.on('hide.bs.collapse', function() {
        $chevronIcon.css('transform', 'rotate(-90deg)');
      });
      // Set initial state
      if ($usageChartsCollapse.hasClass('show')) {
        $chevronIcon.css('transform', 'rotate(0deg)');
      } else {
        $chevronIcon.css('transform', 'rotate(-90deg)');
      }
    }
  });
</script>
